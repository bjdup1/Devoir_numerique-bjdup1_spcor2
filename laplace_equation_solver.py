import numpy as np

from src.fields import ScalarField


class LaplaceEquationSolver:
    """
    A Laplace equation solver used to compute the resultant potential field P in 2D-space generated by a constant
    voltage field V (for example due to wires).
    """

    def __init__(self, nb_iterations: int = 1000):
        """
        Laplace solver constructor. Used to define the number of iterations for the relaxation method.

        Parameters
        ----------
        nb_iterations : int
            Number of iterations performed to obtain the potential by the relaxation method (default = 1000).
        """
        self.nb_iterations = nb_iterations

    def solve(self, constant_voltage: ScalarField) -> ScalarField:
        """
        Solve the Laplace equation to compute the electric field given an electric current field. ## Solve the Laplace équation to compute the electric field

        Parameters
        ----------
        constant_voltage : ScalarField
            A scalar field V : ℝ² → ℝ ; (x, y) → V(x, y), where V(x, y) is the wires' voltage at a given point (x, y)
            in space.

        Returns
        -------
        potential : ScalarField
            A scalar field P : ℝ² → ℝ ; (x, y) → P(x, y), where P(x, y) is the electric potential at a given point
            (x, y) in space. The difference between P and V is that P gives the potential in the whole world, i.e in
            the wires and in the empty space between the wires, while the field V always gives V(x, y) = 0 if (x, y)
            is not a point belonging to an electric wire.
        """


        y = int(np.size(constant_voltage[0]))
        x = int(np.size(constant_voltage) / y)
        potential = np.zeros(((x+2),(y+2)))
        potential[1:-1, 1:-1] = constant_voltage                # On initialise le potentiel initial

        mask = constant_voltage != 0

        for n in range(self.nb_iterations):                     # Méthode de relaxation
            potential[1:-1, 1:-1] = (potential[1:-1, 2:] + potential[1:-1, :-2] + potential[2:, 1:-1] + potential[:-2, 1:-1]) / 4
            potential[1:-1, 1:-1][mask == True] = 0
            potential[1:-1, 1:-1] += constant_voltage

        return ScalarField(potential[1:-1, 1:-1])
