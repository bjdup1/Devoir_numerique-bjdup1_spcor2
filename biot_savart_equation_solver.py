import numpy as np
from scipy.constants import mu_0, pi

from src.fields import VectorField


class BiotSavartEquationSolver:
    """
    A Biot–Savart law solver used to compute the resultant magnetic field B in 2D-space generated by a constant current
    field I (for example due to wires).
    """

    def solve(self, electric_current: VectorField) -> VectorField:
        """
        Solve the Biot–Savart equation to compute the magnetic field given an electric current field.

        Parameters
        ----------
        electric_current : VectorField
            A vector field I : ℝ² → ℝ³ ; (x, y) → (I_x(x, y), I_y(x, y), I_z(x, y)), where I_x(x, y), I_y(x, y) and
            I_z(x, y) are the 3 components of the electric current vector at a given point (x, y) in space. Note that
            I_z = 0 is always True in our 2D world.

        Returns
        -------
        magnetic_field : VectorField
            A vector field B : ℝ² → ℝ³ ; (x, y) → (B_x(x, y), B_y(x, y), B_z(x, y)), where B_x(x, y), B_y(x, y) and
            B_z(x, y) are the 3 components of the magnetic vector at a given point (x, y) in space. Note that
            B_x = B_y = 0 is always True in our 2D world.
        """

        magnetic_field = np.full_like(electric_current, 0)

        for x_cour in range(len(magnetic_field)):                                                    # On boucle sur le circuit électrique.
            for y_cour in range(len(magnetic_field[0])):
                if electric_current[x_cour, y_cour, 0] != 0:                                         # Courant dans le sens des x
                    for x_mag in range(len(electric_current)):                                       # On boucle ensuite sur le champ magnétique.
                        for y_mag in range(len(electric_current[0])):
                            if y_mag == y_cour:
                                continue
                            r = np.abs(y_mag-y_cour)
                            theta_1 = np.arctan((np.abs(x_mag-x_cour) - 0.5)/r)
                            theta_2 = np.arctan((np.abs(x_mag-x_cour) + 0.5)/r)
                            I = ((y_mag - y_cour)/r) * electric_current[x_cour, y_cour, 0]
                            magnetic_field[x_mag, y_mag, 2] += ((np.sin(theta_2)-np.sin(theta_1)) * I )/r
                if electric_current[x_cour, y_cour, 1] != 0:                                         # Courant dans le sens des y
                    for x_mag in range(len(electric_current)):                                       # On boucle ensuite sur le champ magnétique.
                        for y_mag in range(len(electric_current[0])):
                            if x_mag == x_cour:
                                continue
                            r = np.abs(x_mag-x_cour)
                            theta_1 = np.arctan((np.abs(y_mag-y_cour) - 0.5)/r)
                            theta_2 = np.arctan((np.abs(y_mag-y_cour) + 0.5)/r)
                            I = ((x_cour - x_mag)/r) * electric_current[x_cour, y_cour, 1]
                            magnetic_field[x_mag, y_mag, 2] += ((np.sin(theta_2)-np.sin(theta_1)) * I )/r
            print("{:.2f}".format((x_cour + 1)/(len(magnetic_field))* 100),"%","complété")                   # Affiche la progression approximative
        return VectorField(magnetic_field * (mu_0/(4*pi)))
